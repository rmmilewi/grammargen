üß† Task: Refactor an Existing Lark Grammar for Magic: The Gathering
You‚Äôve been working on a Lark grammar (using the Earley parser) that parses valid Magic: The Gathering (MTG) rules text. This grammar is located at:

cases/mtg/grammar.lark

Your goal is to refactor the MTG grammar to reduce duplication and improve structure without significantly degrading parsing performance. Your task is to refactor the existing grammar to improve:

Readability ‚Äì Make the grammar easier for humans to read and understand.

Maintainability ‚Äì Reduce unnecessary duplication or overly specific rules.

Generalizability ‚Äì Consolidate repeated rule patterns that differ only slightly.

‚úÖ Refactoring Goal
Currently, the grammar contains overly specific rules like:

| "Target"i entity "sacrifices"i "a creature of their choice"i
| "Target"i entity "sacrifices"i "a permanent of their choice"i
| "Target"i entity "sacrifices"i "a"i permanent_type "of their choice"i
| "Each"i entity "sacrifices"i "a creature of their choice"i
| "Each"i entity "sacrifices"i "a permanent of their choice"i
| "Each"i entity "sacrifices"i "a"i permanent_type "of their choice"i
These should be consolidated into a smaller number of more general rules. When doing so, prefer using nonterminals like sacrifices_clause, target_prefix, or sacrifice_object if that improves structure and reuse.

Your refactor should retain or improve the ability of the grammar to parse correct MTG rules text. Some decrease in parse coverage is acceptable temporarily if it helps simplify and generalize the grammar.

To be clear...
‚ùå Do not add rules that only exist to parse additional cards.
‚úÖ Instead, replace narrow or duplicated rules with more abstracted, reusable patterns.

Remove redundant or overly specific alternatives, introduce meaningful nonterminals to group similar constructs, and ensure each rule contributes to parsing multiple card texts, not just one.
Prefer descriptive nonterminal names over generic ones (sacrifice_clause instead of action1), and group related productions together and add comments

üß™ Testing Your Refactor
To test how many cards from our dataset the grammar can parse, run the driver from the project root:

python driver.py --grammar_file cases/mtg/grammar.lark --input_file cases/mtg/inputs.txt

This reports how many card texts from the input file were successfully parsed. The driver reports how many card texts in inputs.txt could be parsed without errors. This is your proxy for the grammar's coverage. Use it to compare before vs after refactoring.

üõ†Ô∏è Sanity Check (Optional)
You can test whether the driver is working properly by using a known grammar for the a^n b^n c^n language:

python driver.py --grammar_file cases/an_bn_cn/grammar.lark --input_file cases/an_bn_cn/inputs.txt --transformer cases.an_bn_cn.transformer

üìö Resources
If you're unsure what kinds of terms or constructions are legal in Magic text, refer to the Magic Comprehensive Rules file:

MagicCompRules 20250404.txt
This file includes legal creature types, terminology, and phrasing conventions used across MTG cards.